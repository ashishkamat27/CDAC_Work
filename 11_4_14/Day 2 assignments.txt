1) create a class with constructors and destructors.
create array of instances and observe how program behaves.


2) create a class with constructors and destructor.
create 2 instances on stack and 1 instance on heap. observe the invocation of constructors and destructors.

3) create a class "book" with
int bookid
char *bookname
int price

define parameterized constructor only for this class.
define 3 getter functions.

now create 2 instances
1 on stack and 1 on heap.
pass the necessary values while creating instances.
call the getter functions.

4) define a class with non-static members and a static member "int count".
define necessary constructors and destructor.
define a static member "int getCount()"
this function should return count.
this static member is to keep a track of no. of instances created of a class.
just create some instances of this class.
now call "getCount()" and display how many instances are created.

5) Define a class "course"
with
char *courseid;
char *coursename;
int fees;

define parameterized constructor only.
define destructor.
define a function "void display()" ,in which u can display all the members .
create an instance of this class.
call "display()" with that instance.
now initialize an instance with previously created instance.
call display() with this new instance and check the result.

6) define a class "account"
with
char *id
char *name;
int balance;
const int rate;

define necessary constructors ,member functions and destructor.
create atleast 4 instances and call the memeber functions

7)create a class "MyClass1"
with members and member function "disp1().
create another class "MyClass2"
with members and member function "disp2().
now try to invoke disp1() from disp2()
in the main() function, create instances of both the classes and invoke their member functions.

8) create a class.
accept from user, how many instances are required.
Accordingly create array of instances dynamically.
Now make sure that u call destructor for each and every instances.

9) create a class with static and non-static members and member functions.
check out the relationship between static and non-static members.




 
